document.addEventListener('DOMContentLoaded', () => {
    // üö®üö®üö® –í–ê–ñ–ù–û: –í–°–¢–ê–í–¨ –°–Æ–î–ê URL –¢–í–û–ï–ì–û CLOUDFLARE WORKER'–ê üö®üö®üö®
    const WORKER_URL = 'https://crm-facebook.brelok2023.workers.dev';

    const form = document.getElementById('crmOrderForm');
    const productList = document.getElementById('productList');
    const sendButton = document.getElementById('sendOrderBtn');
    const statusMessage = document.getElementById('statusMessage');
    
    // --- –ö–ª—é—á–µ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
    const totalSummaryEl = document.getElementById('totalSummary');
    if (!totalSummaryEl) {
        alert("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –≠–ª–µ–º–µ–Ω—Ç —Å id 'totalSummary' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ HTML. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à HTML-—Ñ–∞–π–ª.");
        return; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
    }

    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∞–π—Ç–µ –∫ –∫–æ–¥–æ–≤–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –≤ —Ç–∞–±–ª–∏—Ü–µ
    const PRODUCT_MAP = {
        'p_A': { name: '–§–ù', is_main: true },
        'p_B': { name: '–ù–ù', is_main: true },
        'p_C': { name: '–ù', is_main: true },
        'p_D': { name: '–§–§', is_main: true },
        'p_E': { name: '–û–±—å–µ–¥', is_main: true },
        'p_F': { name: '–õ–∞–Ω—Ü1', is_main: false },
        'p_G': { name: '–õ–∞–Ω—Ü2', is_main: false },
        'p_H': { name: '–õ–∞–Ω—Ü3', is_main: false },
        'p_I': { name: '–ë–∞–º–ø–µ—Ä', is_main: false },
        'p_J': { name: '–ö–∞—Ä—Ç–æ–Ω', is_main: false },
        'p_K': { name: '–ü–ª–∞—Å—Ç–∏–∫', is_main: false },
        'p_L': { name: '–ë—Ä–µ–ª–æ–∫0', is_main: false },
    };

    // --- –õ–æ–≥–∏–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    function setupEventListeners() {
        productList.addEventListener('click', (e) => {
            const item = e.target.closest('.product-item');
            if (!item) return;
            const checkbox = item.querySelector('.product-checkbox');
            if (!e.target.closest('.quantity-select')) {
                checkbox.checked = !checkbox.checked;
            }
            updateItemState(item);
            updateTotalSummary();
        });
        productList.addEventListener('change', (e) => {
            if (e.target.classList.contains('quantity-select')) {
                updateTotalSummary();
            }
        });
    }

    function updateItemState(item) {
        const checkbox = item.querySelector('.product-checkbox');
        const select = item.querySelector('.quantity-select');
        if (checkbox.checked) {
            item.classList.add('selected');
            select.disabled = false;
        } else {
            item.classList.remove('selected');
            select.disabled = true;
            select.value = '1';
        }
    }

    function updateTotalSummary() {
        let total = 0;
        let hasItems = false;
        document.querySelectorAll('.product-item.selected').forEach(item => {
            const price = parseFloat(item.dataset.price);
            const quantity = parseInt(item.querySelector('.quantity-select').value);
            total += price * quantity;
            hasItems = true;
        });
        totalSummaryEl.textContent = `–ó–∞–≥–∞–ª—å–Ω–∞ –°—É–º–∞: ${total.toFixed(2)} –≥—Ä–Ω`;
        sendButton.disabled = !hasItems;
    }

    // --- –§–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò –§–û–†–ú–´ ---
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        sendButton.disabled = true;
        sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –í—ñ–¥–ø—Ä–∞–≤–∫–∞...';
        statusMessage.textContent = '';

        const clientFacebook = document.getElementById('clientFacebook').value.trim();
        const isUrgent = document.getElementById('isUrgent').checked;
        
        const mainItems = [];
        const extraItems = [];

        document.querySelectorAll('.product-item.selected').forEach(item => {
            const productId = item.dataset.id;
            const productInfo = PRODUCT_MAP[productId];
            const quantity = parseInt(item.querySelector('.quantity-select').value);
            const itemsArray = Array(quantity).fill(productInfo.name);
            if (productInfo.is_main) {
                mainItems.push(...itemsArray);
            } else {
                extraItems.push(...itemsArray);
            }
        });
        
        const paymentMethodRadio = form.querySelector('input[name="paymentMethod"]:checked');
        if (!clientFacebook || !paymentMethodRadio) {
            showError('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –ù—ñ–∫ —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏.');
            return;
        }

        let prepaymentAmount = 0;
        const totalAmountText = totalSummaryEl.textContent;
        const totalAmount = parseFloat(totalAmountText.match(/[\d\.]+/)[0]);
        
        if (paymentMethodRadio.id === 'payment-prepay') {
            prepaymentAmount = 150;
        } else if (paymentMethodRadio.id === 'payment-full') {
            prepaymentAmount = totalAmount;
        }
        
        const payload = {
            –ù–∏–∫: clientFacebook,
            isUrgent: isUrgent,
            –ó–∞–∫–∞–∑_–∂–µ—Ç–æ–Ω: mainItems.join('+') || '-',
            –î–æ–ø_—Ç–æ–≤–∞—Ä—ã: extraItems.join('+') || '-',
            –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: prepaymentAmount,
        };

        try {
            // –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ WORKER_URL
            const response = await fetch(WORKER_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            const result = await response.json();

            if (result.status === 'success') {
                showSuccess(`‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ! –†—è–¥–æ–∫: ${result.row_added}`);
                form.reset();
                document.querySelectorAll('.product-item').forEach(item => {
                     item.classList.remove('selected');
                     const select = item.querySelector('.quantity-select');
                     if(select) {
                        select.disabled = true;
                        select.value = '1';
                     }
                });
                updateTotalSummary();
            } else {
                 showError(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${result.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.'}`);
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
            showError(`‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: ${error.message}`);
        }
    });

    function showError(message) {
        statusMessage.textContent = message;
        statusMessage.style.color = 'red';
        sendButton.disabled = false;
        sendButton.innerHTML = '<i class="fas fa-paper-plane"></i> –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è';
    }

    function showSuccess(message) {
        statusMessage.textContent = message;
        statusMessage.style.color = '#007bff';
        sendButton.disabled = false;
        sendButton.innerHTML = '<i class="fas fa-paper-plane"></i> –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è';
        setTimeout(() => statusMessage.textContent = '', 7000);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    setupEventListeners();
    updateTotalSummary();
});
